package net.minecraft.src;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.ObjectOutputStream;import java.util.ArrayList;import java.util.LinkedList;import java.util.Map;import net.minecraft.client.Minecraft;import net.minecraft.client.multiplayer.NetClientHandler;import net.minecraft.client.renderer.entity.RenderManager;import net.minecraft.entity.EntityLiving;import net.minecraft.network.INetworkManager;import net.minecraft.network.NetLoginHandler;import net.minecraft.network.NetServerHandler;import net.minecraft.network.packet.NetHandler;import net.minecraft.network.packet.Packet1Login;import net.minecraft.network.packet.Packet250CustomPayload;import net.minecraft.server.MinecraftServer;import cpw.mods.fml.common.network.IConnectionHandler;import cpw.mods.fml.common.network.NetworkMod;import cpw.mods.fml.common.network.Player;@NetworkMod(		clientSideRequired = true,		serverSideRequired = true,		connectionHandler = mod_PFLMF.class		)public class mod_PFLMF extends BaseMod implements IConnectionHandler{	public static boolean usePacket = true;	public static boolean debugMessage = false;	public static boolean isClient;	public static boolean isRelease = false;	public static String packageName = null;	public static Class mod_PFLM_PlayerFormLittleMaid;	public static Class PFLM_ModelData;	public static Class PFLM_RenderPlayer;	public static Class Modchu_ModelCapsHelper;	public static Class Modchu_IModelCaps;	public static Class MMM_IModelCaps;	public static LinkedList<Object[]> sendList = new LinkedList<Object[]>();	private Object pflm_main;	public String getVersion() {		return "1.6.2-3a";	}	public void load() {		Package pack = getClass().getPackage();		if (pack != null) {			packageName = pack.getName();		} else isRelease = true;		Object o = null;		try {			o = ModLoader.getMinecraftInstance();		} catch (Exception e) {		} catch (Error e) {		}		isClient = o != null;		if (isClient) loadcfg();		ModLoader.registerPacketChannel(this, "PFLMF|Upd");	}	public void modsLoaded()	{		if (isClient) {			ModLoader.setInGameHook(this, true, true);			mod_PFLM_PlayerFormLittleMaid = PFLMF_Reflect.loadClass(getClassName("mod_PFLM_PlayerFormLittleMaid"));			pflm_main = PFLMF_Reflect.getFieldObject(mod_PFLM_PlayerFormLittleMaid, "pflm_main");			PFLM_ModelData = PFLMF_Reflect.loadClass(getClassName("PFLM_ModelData"));			PFLM_RenderPlayer = PFLMF_Reflect.loadClass(getClassName("PFLM_RenderPlayer"));			Modchu_ModelCapsHelper = PFLMF_Reflect.loadClass(getClassName("Modchu_ModelCapsHelper"));			Modchu_IModelCaps = PFLMF_Reflect.loadClass(getClassName("Modchu_IModelCaps"));			MMM_IModelCaps = PFLMF_Reflect.loadClass(getClassName("MMM_IModelCaps"));		}	}	public String getPackage() {		return packageName;	}	public String getClassName(String s) {		if (s == null) return null;		if (s.indexOf(".") > -1) return s;		String s1 = getPackage();		if (s1 != null) return s1.concat(".").concat(s);		return s;	}	public boolean onTickInGame(float f, Minecraft minecraft)	{		sendState();		return true;	}	public static void sendState() {		if (!usePacket) return;		if (sendList != null				&& !sendList.isEmpty()) {			Object[] o = new Object[3];			ArrayList list = new ArrayList();			for(int i = sendList.size() - 1; i > -1; i--) {				mod_PFLMF.Debug("sendState sendList i="+i);				o = sendList.get(i);				if(!list.contains(i)) list.add(i);				else continue;				sendState(o);			}			sendList.clear();		}	}	private static void sendState(Object[] o) {		int i1 = 0;		Object modelData = null;		String s = null;		EntityLiving entity = null;		s = ""+o[0];		modelData = o[1];		entity = o[2] instanceof EntityLiving ? (EntityLiving) o[2] : null;		if (modelData != null		&& entity != null) ;else return;		i1 = integerCheck(s) ? Integer.valueOf(s) : -1;		byte[] byte0 = null;		switch(i1) {		case 0:			byte0 = sendState(0, entity.entityId, (byte)0);			break;		case 1:			int caps_isSitting = (Integer) PFLMF_Reflect.getFieldObject(Modchu_IModelCaps, "caps_isSitting", modelData);			boolean isSitting = (Boolean) PFLMF_Reflect.invokeMethod(Modchu_ModelCapsHelper, "getCapsValueBoolean", new Class[]{ MMM_IModelCaps, int.class, Object[].class }, null, new Object[]{ modelData, caps_isSitting, null });			byte0 = sendState(1, entity.entityId, isSitting ? (byte)1 : (byte)0);			mod_PFLMF.Debug("sendState entity.entityId="+entity.entityId+" isSitting="+isSitting);			break;		case 2:			int caps_isSleeping = (Integer) PFLMF_Reflect.getFieldObject(Modchu_IModelCaps, "caps_isSleeping", modelData);			boolean isSleeping = (Boolean) PFLMF_Reflect.invokeMethod(Modchu_ModelCapsHelper, "getCapsValueBoolean", new Class[]{ MMM_IModelCaps, int.class, Object[].class }, null, new Object[]{ modelData, caps_isSleeping, null });			int caps_rotate = (Integer) PFLMF_Reflect.getFieldObject(Modchu_IModelCaps, "caps_rotate", modelData);			int rotate = (Integer) PFLMF_Reflect.invokeMethod(Modchu_ModelCapsHelper, "getCapsValueInt", new Class[]{ MMM_IModelCaps, int.class, Object[].class }, null, new Object[]{ modelData, caps_rotate, null });			byte0 = sendState(2, entity.entityId, isSleeping ? (byte)1 : (byte)0, (byte)rotate);			mod_PFLMF.Debug("sendState entity.entityId="+entity.entityId+" isSleeping="+isSleeping);			break;		case 3:			int caps_shortcutKeysAction = (Integer) PFLMF_Reflect.getFieldObject(Modchu_IModelCaps, "caps_shortcutKeysAction", modelData);			boolean shortcutKeysAction = (Boolean) PFLMF_Reflect.invokeMethod(Modchu_ModelCapsHelper, "getCapsValueBoolean", new Class[]{ MMM_IModelCaps, int.class, Object[].class }, null, new Object[]{ modelData, caps_shortcutKeysAction, null });			int caps_runActionNumber = (Integer) PFLMF_Reflect.getFieldObject(Modchu_IModelCaps, "caps_runActionNumber", modelData);			int runActionNumber = (Integer) PFLMF_Reflect.invokeMethod(Modchu_ModelCapsHelper, "getCapsValueInt", new Class[]{ MMM_IModelCaps, int.class, Object[].class }, null, new Object[]{ modelData, caps_runActionNumber, null });			byte0 = sendState(3, entity.entityId, shortcutKeysAction ? (byte)1 : (byte)0, (byte)runActionNumber);			mod_PFLMF.Debug("sendState entity.entityId="+entity.entityId+" runActionNumber="+runActionNumber);			break;		case 4:			byte0 = sendState(4, entity.entityId, (byte)0);			break;		}		PFLMF_Client.sendToServer(byte0);		mod_PFLMF.Debug("sendState i1="+i1);	}	public static byte[] sendState(int i, Object... o)	{		ByteArrayOutputStream byteOutput = new ByteArrayOutputStream();		try {			ObjectOutputStream objectOutput = new ObjectOutputStream(byteOutput);			objectOutput.writeByte(i);			if (o != null					&& o.length > 0) {				for(int i1 = 0; i1 < o.length; i1++) {					if (o[i1] instanceof Integer) objectOutput.writeInt((Integer) o[i1]);					else if (o[i1] instanceof Byte) objectOutput.writeByte((Byte) o[i1]);					else if (o[i1] instanceof Float) objectOutput.writeFloat((Float) o[i1]);					else if (o[i1] instanceof Long) objectOutput.writeLong((Long) o[i1]);					else if (o[i1] instanceof Object) objectOutput.writeObject((Object) o[i1]);				}			}			objectOutput.flush();		}		catch (Throwable t)		{			throw new RuntimeException(t);		}		return byteOutput.toByteArray();	}	public static Object getPlayerState(int entityId, byte packetId) {		return PFLMF_Client.getPlayerState(entityId, packetId);	}	public static void loadcfg() {		// cfg読み込み		File cfgdir = new File(Minecraft.getMinecraft().mcDataDir, "/config/");		File mainCfgfile = new File(cfgdir, ("PFLMF.cfg"));		if (cfgdir.exists()) {			if (!mainCfgfile.exists()) {				// cfgファイルが無い= 新規作成				String s[] = {						"usePacket=true", "debugMessage=false"				};				PFLMF_Config.writerConfig(mainCfgfile, s);			} else {				// cfgファイルがある				usePacket = Boolean.valueOf((PFLMF_Config.loadConfig(mainCfgfile, "usePacket", usePacket)).toString());				debugMessage = Boolean.valueOf((PFLMF_Config.loadConfig(mainCfgfile, "debugMessage", usePacket)).toString());				String k[] = {						"usePacket", "debugMessage"				};				String k1[] = {						""+usePacket, ""+debugMessage				};				PFLMF_Config.writerSupplementConfig(mainCfgfile, k, k1);			}		}	}	public static boolean integerCheck(String s) {		try {			Integer.valueOf(s);			return true;		} catch (Exception e) {			return false;		}	}	public static boolean isLocalPlay() {		return isClient && ModLoader.getMinecraftInstance().isIntegratedServerRunning();	}	@Override	public void serverCustomPayload(NetServerHandler var1, Packet250CustomPayload var2) {		Debug("serverCustomPayload");		PFLMF_Server.serverCustomPayload(var1, var2);	}	@Override	public void clientCustomPayload(NetClientHandler var1, Packet250CustomPayload var2) {		Debug("clientCustomPayload");		PFLMF_Client.clientCustomPayload(var1, var2);	}	@Override	public void playerLoggedIn(Player player, NetHandler netHandler,			INetworkManager manager) {	}	@Override	public String connectionReceived(NetLoginHandler netHandler,			INetworkManager manager) {		return null;	}	@Override	public void connectionOpened(NetHandler netClientHandler, String server,			int port, INetworkManager manager) {	}	@Override	public void connectionOpened(NetHandler netClientHandler,			MinecraftServer server, INetworkManager manager) {	}	@Override	public void connectionClosed(INetworkManager manager) {	}	@Override	public void clientLoggedIn(NetHandler clientHandler,			INetworkManager manager, Packet1Login login) {		if (pflm_main != null				&& (Boolean) PFLMF_Reflect.getFieldObject(pflm_main.getClass(), "entityReplaceFlag")) {			PFLMF_Reflect.invokeMethod(pflm_main.getClass(), "clientConnect", new Class[]{ NetClientHandler.class }, pflm_main, new Object[]{ clientHandler });		}	}	public static void Debug(String s) {		if (debugMessage) System.out.println((new StringBuilder()).append("mod_PFLMF Debug-").append(s).toString());	}	public static void mDebug(String s) {		if (debugMessage				&& !isRelease) System.out.println((new StringBuilder()).append("mod_PFLMF mDebug_").append(s).toString());	}}