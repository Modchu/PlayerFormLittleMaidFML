package net.minecraft.src;import java.io.ByteArrayInputStream;import java.io.ObjectInputStream;import java.util.HashMap;import java.util.Iterator;import net.minecraft.client.multiplayer.NetClientHandler;import net.minecraft.entity.player.EntityPlayer;import net.minecraft.network.packet.Packet250CustomPayload;import net.minecraft.world.World;public class PFLMF_Client {	public static HashMap<String, byte[]> playerData = new HashMap();	public static void sendToServer(byte[] data) {		ModLoader.clientSendPacket(new Packet250CustomPayload("PFLMF|Upd", data));	}	public static void clientCustomPayload(NetClientHandler handler, Packet250CustomPayload packet) {		receivePacket(packet);	}	public static void receivePacket(Packet250CustomPayload packet) {		receivePacket(packet.data);	}	public static Object receivePacket(byte[] var0) {		try {			ByteArrayInputStream byteInput = new ByteArrayInputStream(var0);			ObjectInputStream objectInput = new ObjectInputStream(byteInput);			byte packetId = objectInput.readByte();			int entityId = objectInput.readInt();			byte by = objectInput.readByte();			byte by2 = -1;			int entityId2 = -1;			try {				by2 = objectInput.readByte();				entityId2 = objectInput.readInt();			} catch (Throwable t) {				try {					entityId2 = objectInput.readInt();				} catch (Throwable t1) {				}			}			//mod_PFLMF.Debug("PFLMF_Client receivePacket packetId="+packetId+" entityId="+entityId+" by="+by+" by2="+by2+" entityId2="+entityId2);			if (packetId != 0) playerData.put(""+entityId+","+packetId, var0);			EntityPlayer player = getPlayer(entityId2 > 0 ? entityId2 : entityId);			Object modelData = null;			if (player != null) {				modelData = PFLMF_Reflect.invokeMethod(mod_PFLMF.PFLM_RenderPlayer, "getPlayerData", new Class[]{ EntityPlayer.class }, null, new Object[]{ player });				if (modelData != null) {				} else {					mod_PFLMF.Debug("PFLMF_Client receivePacket modelData == null !!");					return null;				}			} else {				mod_PFLMF.Debug("PFLMF_Client receivePacket player == null !!");				return null;			}			switch (packetId) {			case 1:				//int caps_isSitting = (Integer) PFLMF_Reflect.getFieldObject(mod_PFLMF.Modchu_IModelCaps, "caps_isSitting", modelData);				//PFLMF_Reflect.invokeMethod(mod_PFLMF.PFLM_ModelData, "setCapsValue", new Class[]{ int.class, Object[].class }, modelData, new Object[]{ caps_isSitting, new Object[]{ by == 1} });				return by == 1;			case 2:				//int caps_isSleeping = (Integer) PFLMF_Reflect.getFieldObject(mod_PFLMF.Modchu_IModelCaps, "caps_isSleeping", modelData);				//PFLMF_Reflect.invokeMethod(mod_PFLMF.PFLM_ModelData, "setCapsValue", new Class[]{ int.class, Object[].class }, modelData, new Object[]{ caps_isSleeping, new Object[]{ by == 1} });				//int caps_rotate = (Integer) PFLMF_Reflect.getFieldObject(mod_PFLMF.Modchu_IModelCaps, "caps_rotate", modelData);				//PFLMF_Reflect.invokeMethod(mod_PFLMF.PFLM_ModelData, "setCapsValue", new Class[]{ int.class, Object[].class }, modelData, new Object[]{ caps_rotate, new Object[]{ Integer.valueOf(by2) } });				return new Object[]{ by == 1, Integer.valueOf(by2) };			case 3:				//int caps_shortcutKeysAction = (Integer) PFLMF_Reflect.getFieldObject(mod_PFLMF.Modchu_IModelCaps, "caps_shortcutKeysAction", modelData);				//PFLMF_Reflect.invokeMethod(mod_PFLMF.PFLM_ModelData, "setCapsValue", new Class[]{ int.class, Object[].class }, modelData, new Object[]{ caps_shortcutKeysAction, new Object[]{ by == 1} });				//if (by == 1) {					//int caps_runActionNumber = (Integer) PFLMF_Reflect.getFieldObject(mod_PFLMF.Modchu_IModelCaps, "caps_runActionNumber", modelData);					//PFLMF_Reflect.invokeMethod(mod_PFLMF.PFLM_ModelData, "setCapsValue", new Class[]{ int.class, Object[].class }, modelData, new Object[]{ caps_runActionNumber, new Object[]{ Integer.valueOf(by2)} });				//}				return new Object[]{ by == 1, Integer.valueOf(by2) };			default:				throw new RuntimeException("PFLMF_Client Unknown packet id="+packetId+" found !!");			}		} catch (Throwable t) {			t.printStackTrace();		}		return null;	}	private static EntityPlayer getPlayer(int entityId) {		World world = ModLoader.getMinecraftInstance().theWorld;		Iterator iterator = world.playerEntities.iterator();		EntityPlayer entityPlayer;		while (iterator.hasNext()) {			entityPlayer = (EntityPlayer) iterator.next();			if (entityPlayer.entityId == entityId) return entityPlayer;		}		return null;	}	public static Object getPlayerState(int entityId, byte packetId) {		if (playerData.containsKey(""+entityId+","+packetId)) {			byte[] byte0 = playerData.get(""+entityId+","+packetId);			return receivePacket(byte0);		}		return null;	}}