package modchu.pflmf;import java.io.ByteArrayInputStream;import java.io.DataInputStream;import java.io.InputStream;import java.util.HashMap;import java.util.concurrent.ConcurrentHashMap;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_Reflect;import modchu.lib.characteristic.Modchu_AS;import modchu.lib.characteristic.Modchu_Packet;import modchu.lib.characteristic.recompileonly.Modchu_CastHelper;public class PFLMF_Client implements PFLMF_IPacketConstant {	public static HashMap<String, ConcurrentHashMap<Integer, Object>> playerData = new HashMap();	public static void onPacketData(Object packet, Object entityPlayer, String channelName) {		try {			receivePacket(Modchu_Packet.getPacketInputStream(packet));		} catch (Exception e) {			e.printStackTrace();		}	}	public static Object receivePacket(byte[] var0) {		try {			return receivePacket(new DataInputStream(new ByteArrayInputStream(var0)));		} catch (Throwable t) {			t.printStackTrace();		}		return null;	}	public static Object receivePacket(InputStream input) {		return receivePacket(Modchu_Packet.receivePacketData(input));	}	public static Object receivePacket(ConcurrentHashMap<Integer, Object> map) {		return receivePacket(map, false);	}	public static Object receivePacket(ConcurrentHashMap<Integer, Object> map, boolean readOnly) {		byte packetId = (Byte)(map.containsKey(0) ? map.get(0) : (byte) -1);		int entityId = (Integer)(map.containsKey(1) ? map.get(1) : -1);		byte by = (Byte)(map.containsKey(2) ? map.get(2) : (byte) -1);		byte by2 = (Byte)(map.containsKey(3) ? map.get(3) : (byte) -1);		int entityId2 = Modchu_CastHelper.Int(map.containsKey(4) ? map.get(4) : -1);		if (!readOnly) Modchu_Debug.Debug("PFLMF_Client receivePacket packetId="+packetId+" entityId="+entityId+" by="+by+" by2="+by2+" entityId2="+entityId2);		Object player = getPlayer(entityId2 > 0 ? entityId2 : entityId);		Object modelData = null;		if (player != null) {			Object instance = Modchu_Reflect.getFieldObject("modchu.pflm.PFLM_ModelDataMaster", "instance");			modelData = Modchu_Reflect.invokeMethod("modchu.pflm.PFLM_ModelDataMaster", "getPlayerData", new Class[]{ Object.class }, instance, new Object[]{ player });			if (modelData != null) {			} else {				Modchu_Debug.Debug("PFLMF_Client receivePacket modelData == null !!");				return null;			}		} else {			Modchu_Debug.Debug("PFLMF_Client receivePacket player == null !!");			return null;		}		Object o = null;		switch (packetId) {		case packet_IDRemove:		case packet_IDLANRemove:			return null;		case packet_IDSitting:		case packet_IDLANSitting:			o = by == 1;			if (!readOnly) Modchu_Debug.Debug("PFLMF_Client receivePacket packet_IDSitting by="+by);			break;		case packet_IDSleeping:		case packet_IDLANSleeping:			o = new Object[]{ by == 1, Modchu_CastHelper.Int(by2) };			break;		case packet_IDAction:		case packet_IDLANAction:			//if (!readOnly) Modchu_Debug.Debug("PFLMF_Client receivePacket packet_IDAction by="+by);			o = by == 1;			break;		case packet_IDRunActionNumber:		case packet_IDLANRunActionNumber:			//if (!readOnly) Modchu_Debug.Debug("PFLMF_Client receivePacket packet_IDRunActionNumber ="+Modchu_CastHelper.Int(by));			o = Modchu_CastHelper.Int(by);			break;		case packet_IDAll:		case packet_IDLANAll:			return null;		default:			throw new RuntimeException("PFLMF_Client Unknown packetId="+packetId+" found !!");		}		if (packetId != packet_IDAll				&& packetId != packet_IDLANAll						&& o != null						&& !readOnly) {			if (packetId > 99) packetId = (byte)((int)packetId - 100);			playerData.put(""+entityId+","+packetId, map);		}		return o;	}	private static Object getPlayer(int entityId) {		return PFLMF_Main.getPlayer(Modchu_AS.get(Modchu_AS.minecraftTheWorld), entityId);	}	public static ConcurrentHashMap<Integer, Object> getPlayerState(int entityId, byte packetId) {		if (playerData.containsKey(""+entityId+","+packetId)) return playerData.get(""+entityId+","+packetId);		return null;	}}