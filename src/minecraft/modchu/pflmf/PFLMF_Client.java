package modchu.pflmf;import java.io.ByteArrayInputStream;import java.io.ObjectInputStream;import java.util.HashMap;import java.util.Iterator;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_IPacketConstant;import modchu.lib.Modchu_Reflect;import net.minecraft.entity.Entity;import net.minecraft.entity.player.EntityPlayer;import net.minecraft.network.INetworkManager;import net.minecraft.network.packet.Packet250CustomPayload;import net.minecraft.world.World;import cpw.mods.fml.client.FMLClientHandler;import cpw.mods.fml.common.network.PacketDispatcher;import cpw.mods.fml.common.network.Player;public class PFLMF_Client implements Modchu_IPacketConstant {	public static HashMap<String, Object> playerData = new HashMap();	public static void sendToServer(byte[] data) {		PacketDispatcher.sendPacketToServer(new Packet250CustomPayload("PFLMF|Upd", data));	}	public static void clientCustomPayload(INetworkManager manager, Packet250CustomPayload packet, Player player) {		receivePacket(packet);	}	public static void receivePacket(Packet250CustomPayload packet) {		receivePacket(packet.data);	}	public static Object receivePacket(byte[] var0) {		try {			ByteArrayInputStream byteInput = new ByteArrayInputStream(var0);			ObjectInputStream objectInput = new ObjectInputStream(byteInput);			byte packetId = objectInput.readByte();			int entityId = objectInput.readInt();			byte by = objectInput.readByte();			byte by2 = -1;			int entityId2 = -1;			try {				by2 = objectInput.readByte();				entityId2 = objectInput.readInt();			} catch (Throwable t) {				try {					entityId2 = objectInput.readInt();				} catch (Throwable t1) {				}			}			//Modchu_Debug.Debug("PFLMF_Client receivePacket packetId="+packetId+" entityId="+entityId+" by="+by+" by2="+by2+" entityId2="+entityId2);			EntityPlayer player = getPlayer(entityId2 > 0 ? entityId2 : entityId);			Object modelData = null;			if (player != null) {				Object instance = Modchu_Reflect.getFieldObject("modchu.pflm.PFLM_ModelDataMaster", "instance");				modelData = Modchu_Reflect.invokeMethod("modchu.pflm.PFLM_ModelDataMaster", "getPlayerData", new Class[]{ Entity.class }, instance, new Object[]{ player });				if (modelData != null) {				} else {					Modchu_Debug.Debug("PFLMF_Client receivePacket modelData == null !!");					return null;				}			} else {				Modchu_Debug.Debug("PFLMF_Client receivePacket player == null !!");				return null;			}			Object o = null;			switch (packetId) {			case packet_IDRemove:				return null;			case packet_IDSitting:				o = by == 1;				break;			case packet_IDSleeping:				o = new Object[]{ by == 1, Integer.valueOf(by2) };				break;			case packet_IDAction:				//Modchu_Debug.Debug("PFLMF_Client receivePacket packet_IDAction by="+by);				o = by == 1;				break;			case packet_IDRunActionNumber:				//Modchu_Debug.Debug("PFLMF_Client receivePacket packet_IDRunActionNumber ="+Integer.valueOf(by));				o = Integer.valueOf(by);				break;			default:				throw new RuntimeException("PFLMF_Client Unknown packet id="+packetId+" found !!");			}			if (packetId != packet_IDAll					&& o != null) playerData.put(""+entityId+","+packetId, o);		} catch (Throwable t) {			t.printStackTrace();		}		return null;	}	private static EntityPlayer getPlayer(int entityId) {		World world = FMLClientHandler.instance().getClient().theWorld;		Iterator iterator = world.playerEntities.iterator();		EntityPlayer entityPlayer;		while (iterator.hasNext()) {			entityPlayer = (EntityPlayer) iterator.next();			if (entityPlayer.entityId == entityId) return entityPlayer;		}		return null;	}	public static Object getPlayerState(int entityId, byte packetId) {		if (playerData.containsKey(""+entityId+","+packetId)) return playerData.get(""+entityId+","+packetId);		return null;	}}