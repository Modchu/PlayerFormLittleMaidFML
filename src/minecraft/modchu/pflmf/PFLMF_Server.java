package modchu.pflmf;import java.io.ByteArrayInputStream;import java.io.ObjectInputStream;import java.util.HashMap;import java.util.Iterator;import java.util.Map.Entry;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_IPacketConstant;import modchu.lib.Modchu_Main;import modchu.lib.Modchu_PacketConstantManager;import net.minecraft.entity.player.EntityPlayer;import net.minecraft.entity.player.EntityPlayerMP;import net.minecraft.network.INetworkManager;import net.minecraft.network.NetServerHandler;import net.minecraft.network.packet.Packet250CustomPayload;import net.minecraft.world.World;import net.minecraft.world.WorldServer;import cpw.mods.fml.common.FMLCommonHandler;import cpw.mods.fml.common.network.PacketDispatcher;import cpw.mods.fml.common.network.Player;public class PFLMF_Server implements Modchu_IPacketConstant {	public static HashMap<String, Object[]> playerData = new HashMap();	private static final int maxServerPacketCount = 5;	public static void sendToClient(NetServerHandler pHandler, byte[] data) {		sendToClient(pHandler, new Packet250CustomPayload("PFLMF|Upd", data));	}	public static void sendToClient(NetServerHandler pHandler, Packet250CustomPayload packet) {		sendToClient(packet, (Player)pHandler.getPlayer());	}	public static void sendToClient(Packet250CustomPayload packet, Player player) {		if (packet != null				&& player != null) PacketDispatcher.sendPacketToPlayer(packet, player);	}	public static void sendToClient(Packet250CustomPayload packet, EntityPlayerMP entityPlayerMP) {		if (packet != null				&& entityPlayerMP != null) entityPlayerMP.playerNetServerHandler.sendPacketToPlayer(packet);	}	public static void serverCustomPayload(INetworkManager manager, Packet250CustomPayload packet, Player player) {		if (packet.data != null) ;else {			Modchu_Debug.Debug("受信 PFLMF_Server serverCustomPayload packet.data == null !!");			return;		}		Modchu_Debug.Debug("PFLMF_Server serverCustomPayload start.----------------");		Modchu_Debug.Debug("受信 PFLMF_Server serverCustomPayload packet.data[0]="+packet.data[0]);		//Modchu_Debug.Debug("受信 PFLMF_Server serverCustomPayload packet.data[1]="+packet.data[1]);		try {			ByteArrayInputStream byteInput = new ByteArrayInputStream(packet.data);			ObjectInputStream objectInput = new ObjectInputStream(byteInput);			byte packetId = objectInput.readByte();			int entityId = objectInput.readInt();			byte by = objectInput.readByte();			EntityPlayer entityPlayer = getPlayer(entityId);			Object[] o = new Object[4];			o[0] = entityId;			o[1] = by;			byte by2 = -1;			try {				by2 = objectInput.readByte();			} catch (Throwable t) {			}			o[2] = by2;			o[3] = -1;			byte n = 0;			String username = entityPlayer != null ? entityPlayer.username : null;			Modchu_Debug.Debug("PFLMF_Server serverCustomPayload packetId="+(Modchu_PacketConstantManager.getConstantString(packetId)));			switch (packetId) {			case packet_IDRemove:				for(int i = 0; i < playerData.size(); i++) {					if (playerData.containsKey(""+entityId+","+i)) playerData.remove(""+entityId+","+i);				}				Modchu_Debug.Debug("PFLMF_Server serverCustomPayload entityId="+entityId+" playerData.remove");				return;			case packet_IDSitting:				n = packet_IDSitting;				break;			case packet_IDSleeping:				n = packet_IDSleeping;				break;			case packet_IDAction:				n = packet_IDAction;				break;			case packet_IDRunActionNumber:				n = packet_IDRunActionNumber;				break;			case packet_IDAll:				n = packet_IDAll;				Iterator<Entry<String, Object[]>> iterator = playerData.entrySet().iterator();				Entry<String, Object[]> entry;				String s;				int i;				int i1;				Modchu_Debug.Debug("PFLMF_Server serverCustomPayload --------------------packet_IDAll start");				byte[] byte1;				while(iterator.hasNext()) {					entry = iterator.next();					s = entry.getKey();					o = entry.getValue();					i1 = s.indexOf(",");					if (i1 < 0) continue;					int entityId2 = Integer.valueOf(s.substring(0, i1));					i = Integer.valueOf(s.substring(i1 + 1));					if (o != null) {						o[3] = entityId2;						byte1 = PFLMF.sendState(i, o);						manager.addToSendQueue(new Packet250CustomPayload("PFLMF|Upd", byte1));						Modchu_Debug.Debug("PFLMF_Server serverCustomPayload entityId="+entityId+" username="+username+" all send i="+i+" o[0]="+o[0]+" o[1]="+o[1]+" o[2]="+o[2]+" o[3]="+o[3]);					}				}				Modchu_Debug.Debug("PFLMF_Server serverCustomPayload entityId="+entityId+" username="+username+" all send");				Modchu_Debug.Debug("PFLMF_Server serverCustomPayload --------------------packet_IDAll end");				return;			case packet_IDLANRemove:			case packet_IDLANSitting:			case packet_IDLANSleeping:			case packet_IDLANAction:			case packet_IDLANRunActionNumber:			case packet_IDLANAll:				break;			default:				throw new RuntimeException("PFLMF_Server Unknown packet id="+packetId+" found !!");			}			if (entityPlayer != null) {				Modchu_Debug.Debug("PFLMF_Server serverCustomPayload entityId="+entityId+" username="+username+" packet id="+packetId+" o[0]="+o[0]+" o[1]="+o[1]);				if (o.length > 2) Modchu_Debug.Debug("PFLMF_Server serverCustomPayload o[2]="+o[2]);				if (packetId != 0) playerData.put(""+entityId+","+n, o);				else {					for(int i = 0; i < maxServerPacketCount; i++) {						if (playerData.containsKey(""+entityId+","+i)) playerData.remove(""+entityId+","+i);					}				}				if (packetId != packet_IDAll						&& packetId < 100) {					byte[] byte1 = PFLMF.sendState((int)packetId + 100, o);					Packet250CustomPayload packet2 = PFLMF.isClient							&& Modchu_Main.isLANWorld() ? new Packet250CustomPayload("PFLMF|Upd", byte1) : packet;					if (entityPlayer instanceof EntityPlayerMP) {						if (PFLMF.isClient							&& Modchu_Main.isLANWorld()) {							manager.addToSendQueue(packet2);						} else {							sendToClient(packet2, (EntityPlayerMP)entityPlayer);						}					}					((WorldServer)entityPlayer.worldObj).getEntityTracker().sendPacketToAllPlayersTrackingEntity(entityPlayer, packet2);					Modchu_Debug.Debug("PFLMF_Server serverCustomPayload 送信");				}			} else {				Modchu_Debug.Debug("PFLMF_Server serverCustomPayload player == null !!");			}		} catch (Throwable t) {			t.printStackTrace();		}		Modchu_Debug.Debug("PFLMF_Server serverCustomPayload end.----------------");	}	private static EntityPlayer getPlayer(int entityId) {		World world = FMLCommonHandler.instance().getMinecraftServerInstance().worldServers[0];		Iterator iterator = world.playerEntities.iterator();		EntityPlayer entityPlayer;		while (iterator.hasNext()) {			entityPlayer = (EntityPlayer) iterator.next();			if (entityPlayer.entityId == entityId) return entityPlayer;		}		return null;	}}