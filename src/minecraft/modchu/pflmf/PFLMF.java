package modchu.pflmf;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.ObjectOutputStream;import java.util.ArrayList;import java.util.EnumSet;import java.util.LinkedList;import modchu.debug.DPS_debugPlayerSpawn;import modchu.lib.Modchu_Config;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_IPacketConstant;import modchu.lib.Modchu_Main;import modchu.lib.Modchu_Reflect;import net.minecraft.client.Minecraft;import net.minecraft.client.multiplayer.NetClientHandler;import net.minecraft.entity.Entity;import net.minecraft.network.INetworkManager;import net.minecraft.network.NetLoginHandler;import net.minecraft.network.packet.NetHandler;import net.minecraft.network.packet.Packet1Login;import net.minecraft.network.packet.Packet250CustomPayload;import net.minecraft.server.MinecraftServer;import cpw.mods.fml.client.FMLClientHandler;import cpw.mods.fml.common.FMLCommonHandler;import cpw.mods.fml.common.ITickHandler;import cpw.mods.fml.common.Mod;import cpw.mods.fml.common.Mod.EventHandler;import cpw.mods.fml.common.TickType;import cpw.mods.fml.common.event.FMLInitializationEvent;import cpw.mods.fml.common.event.FMLPreInitializationEvent;import cpw.mods.fml.common.network.IConnectionHandler;import cpw.mods.fml.common.network.IPacketHandler;import cpw.mods.fml.common.network.NetworkMod;import cpw.mods.fml.common.network.Player;import cpw.mods.fml.common.registry.TickRegistry;import cpw.mods.fml.relauncher.Side;@Mod(modid="PFLMF", name="PFLMF", version="5")@NetworkMod(		clientSideRequired = true,		serverSideRequired = true,		channels = {"PFLMF|Upd"},		packetHandler = PFLMF.class,		connectionHandler = PFLMF.class		)public class PFLMF implements IPacketHandler, IConnectionHandler, ITickHandler, Modchu_IPacketConstant {	public static boolean usePacket = true;	//public static boolean debugMessage = false;	public static boolean isClient;	public static boolean isRelease = false;	public static LinkedList<Object[]> sendList = new LinkedList<Object[]>();	private boolean autoUsePacketOff = false;	public static PFLMF pflmf;	public PFLMF() {		pflmf = this;	}	public String getVersion() {		return "1.6.4-5";	}	//@Mod.PreInit	@EventHandler	public void preInit(FMLPreInitializationEvent event) {		//mDebug("PFLMF preInit");		if (Modchu_Reflect.loadClass("net.minecraft.src.FMLRenderAccessLibrary") != null) ;else isRelease = true;		Modchu_Debug.Debug("PFLMF preInit isRelease="+isRelease);		Object o = null;		isClient = FMLCommonHandler.instance().getSide().isClient();		loadcfg();		//ModLoader.registerPacketChannel(this, "PFLMF|Upd");		if (isClient) {			TickRegistry.registerTickHandler(this, Side.CLIENT);			//PFLMF_Aether.init();		} else {			TickRegistry.registerTickHandler(this, Side.SERVER);		}	}	//@Mod.PreInit	@EventHandler	public void init(FMLInitializationEvent event) {	}	@Override	public void tickStart(EnumSet type, Object... tickData) {		//Modchu_Debug.Debug("tickStart");		if (!isClient) return;		if (Modchu_Main.isRelease()) {			if (usePacket					&& Minecraft.getMinecraft().isSingleplayer()) {				usePacket = false;				autoUsePacketOff = true;			}			if (autoUsePacketOff					&& !Minecraft.getMinecraft().isSingleplayer()) {				usePacket = true;				autoUsePacketOff = false;			}		}	}	@Override	public void tickEnd(EnumSet type, Object... tickData) {		//Modchu_Debug.Debug("tickEnd");		sendState();	}	public static void sendState() {		if (!usePacket) return;		if (sendList != null				&& !sendList.isEmpty()) {			Object[] o = new Object[3];			ArrayList list = new ArrayList();			int i1;			for(int i = sendList.size() - 1; i > -1; i--) {				Modchu_Debug.Debug("sendState sendList i="+i);				o = sendList.get(i);				i1 = Integer.valueOf(""+o[0]);				if(!list.contains(i1)) list.add(i1);				else continue;				sendState(o);			}			sendList.clear();			if (sendList.isEmpty()) Modchu_Debug.mDebug("sendState sendList clear sendList.isEmpty()");		} else {			//if (sendList != null) {				//if (sendList.isEmpty()) Modchu_Debug.mDebug("sendState sendList sendList.isEmpty()");			//} else Modchu_Debug.mDebug("sendState sendList sendList == null");		}	}	private static void sendState(Object[] o) {		int i1 = 0;		Object modelData = null;		String s = null;		Entity entity = null;		s = ""+o[0];		modelData = o[1];		entity = o[2] instanceof Entity ? (Entity) o[2] : null;		if (modelData != null		&& entity != null) ;else {			System.out.println("PFLMF sendState return modelData="+modelData);			System.out.println("PFLMF sendState return entity="+entity);			return;		}		i1 = integerCheck(s) ? Integer.valueOf(s) : -1;		byte[] byte0 = null;		switch(i1) {		case packet_IDRemove:			byte0 = sendState(packet_IDRemove, entity.entityId, (byte)packet_FALSE);			break;		case packet_IDSitting:			boolean isSitting = false;			if (o.length > 3					&& o[3] instanceof Object[]) {				Object[] o2 = (Object[]) o[3];				isSitting = Boolean.valueOf(""+o2[0]);			} else {				int caps_isSitting = (Integer) Modchu_Reflect.getFieldObject("modchu.model.ModchuModel_IModelCaps", "caps_isSitting", modelData);				isSitting = (Boolean) Modchu_Reflect.invokeMethod("modchu.model.ModchuModel_ModelCapsHelper", "getCapsValueBoolean", new Class[]{ Modchu_Reflect.loadClass("modchu.model.ModchuModel_IModelCaps"), int.class, Object[].class }, null, new Object[]{ modelData, caps_isSitting, null });			}			byte0 = sendState(packet_IDSitting, entity.entityId, isSitting ? (byte)packet_TRUE : (byte)packet_FALSE);			Modchu_Debug.Debug("sendState entity.entityId="+entity.entityId+" isSitting="+isSitting);			break;		case packet_IDSleeping:			boolean isSleeping = false;			int rotate = 0;			if (o.length > 3					&& o[3] instanceof Object[]) {				Object[] o2 = (Object[]) o[3];				isSleeping = Boolean.valueOf(""+o2[0]);				rotate = Integer.valueOf(""+o2[1]);			} else {				int caps_isSleeping = (Integer) Modchu_Reflect.getFieldObject("modchu.model.ModchuModel_IModelCaps", "caps_isSleeping", modelData);				isSleeping = (Boolean) Modchu_Reflect.invokeMethod("modchu.model.ModchuModel_ModelCapsHelper", "getCapsValueBoolean", new Class[]{ Modchu_Reflect.loadClass("modchu.model.ModchuModel_IModelCaps"), int.class, Object[].class }, null, new Object[]{ modelData, caps_isSleeping, null });				int caps_rotate = (Integer) Modchu_Reflect.getFieldObject("modchu.model.ModchuModel_IModelCaps", "caps_rotate", modelData);				rotate = (Integer) Modchu_Reflect.invokeMethod("modchu.model.ModchuModel_ModelCapsHelper", "getCapsValueInt", new Class[]{ Modchu_Reflect.loadClass("modchu.model.ModchuModel_IModelCaps"), int.class, Object[].class }, null, new Object[]{ modelData, caps_rotate, null });			}			byte0 = sendState(packet_IDSleeping, entity.entityId, isSleeping ? (byte)packet_TRUE : (byte)packet_FALSE, (byte)rotate);			Modchu_Debug.Debug("sendState entity.entityId="+entity.entityId+" isSleeping="+isSleeping);			break;		case packet_IDAction:			boolean shortcutKeysAction = false;			if (o.length > 3					&& o[3] instanceof Object[]) {				Object[] o2 = (Object[]) o[3];				shortcutKeysAction = Boolean.valueOf(""+o2[0]);				Modchu_Debug.Debug("sendState packet_IDAction shortcutKeysAction="+shortcutKeysAction);			} else {				int caps_shortcutKeysAction = (Integer) Modchu_Reflect.getFieldObject("modchu.model.ModchuModel_IModelCaps", "caps_shortcutKeysAction", modelData);				shortcutKeysAction = (Boolean) Modchu_Reflect.invokeMethod("modchu.model.ModchuModel_ModelCapsHelper", "getCapsValueBoolean", new Class[]{ modelData.getClass(), int.class, Object[].class }, null, new Object[]{ modelData, caps_shortcutKeysAction, null });				int caps_runActionNumber = (Integer) Modchu_Reflect.getFieldObject("modchu.model.ModchuModel_IModelCaps", "caps_runActionNumber", modelData);				Modchu_Debug.Debug("sendState packet_IDAction else shortcutKeysAction="+shortcutKeysAction);			}			byte0 = sendState(packet_IDAction, entity.entityId, shortcutKeysAction ? (byte)packet_TRUE : (byte)packet_FALSE);			break;		case packet_IDRunActionNumber:			int runActionNumber = 0;			if (o.length > 3					&& o[3] instanceof Object[]) {				Object[] o2 = (Object[]) o[3];				runActionNumber = Integer.valueOf(""+o2[0]);				//Modchu_Debug.Debug("sendState packet_IDRunActionNumber runActionNumber="+runActionNumber);			} else {				int caps_runActionNumber = (Integer) Modchu_Reflect.getFieldObject("modchu.model.ModchuModel_IModelCaps", "caps_runActionNumber", modelData);				runActionNumber = (Integer) Modchu_Reflect.invokeMethod("modchu.model.ModchuModel_ModelCapsHelper", "getCapsValueInt", new Class[]{ modelData.getClass(), int.class, Object[].class }, null, new Object[]{ modelData, caps_runActionNumber, null });				//Modchu_Debug.Debug("sendState packet_IDRunActionNumber else runActionNumber="+runActionNumber);			}			byte0 = sendState(packet_IDRunActionNumber, entity.entityId, (byte)runActionNumber);			//Modchu_Debug.Debug("sendState packet_IDAction entity.entityId="+entity.entityId+" runActionNumber="+runActionNumber);			break;		case packet_IDAll:			byte0 = sendState(packet_IDAll, entity.entityId, (byte)packet_FALSE);			break;		}		PFLMF_Client.sendToServer(byte0);		Object mc = Modchu_Main.getMinecraft();		if (Modchu_Reflect.invokeMethod("Minecraft", "func_71391_r", "getNetHandler", mc) != null) {			if ((Boolean) Modchu_Reflect.invokeMethod("Minecraft", "func_71356_B", "isSingleplayer", mc)) {				PFLMF_Client.playerData.put(""+entity.entityId+","+i1, byte0);			}		}		Modchu_Debug.Debug("sendState i1="+i1);	}	public static byte[] sendState(int i, Object... o)	{		ByteArrayOutputStream byteOutput = new ByteArrayOutputStream();		try {			ObjectOutputStream objectOutput = new ObjectOutputStream(byteOutput);			objectOutput.writeByte(i);			if (o != null					&& o.length > 0) {				for(int i1 = 0; i1 < o.length; i1++) {					if (o[i1] instanceof Integer) objectOutput.writeInt((Integer) o[i1]);					else if (o[i1] instanceof Byte) objectOutput.writeByte((Byte) o[i1]);					else if (o[i1] instanceof Float) objectOutput.writeFloat((Float) o[i1]);					else if (o[i1] instanceof Long) objectOutput.writeLong((Long) o[i1]);					else if (o[i1] instanceof Object) objectOutput.writeObject((Object) o[i1]);				}			}			objectOutput.flush();		}		catch (Throwable t)		{			throw new RuntimeException(t);		}		return byteOutput.toByteArray();	}	public static Object getPlayerState(int entityId, byte packetId) {		//Modchu_Debug.Debug("PFLMF getPlayerState entityId="+entityId+" packetId="+packetId);		return PFLMF_Client.getPlayerState(entityId, packetId);	}	public static void loadcfg() {		// cfg読み込み		File cfgdir = new File(isClient ? Minecraft.getMinecraft().mcDataDir : new File("."), "/config/");		File mainCfgfile = new File(cfgdir, ("PFLMF.cfg"));		if (cfgdir.exists()) {			if (!mainCfgfile.exists()) {				// cfgファイルが無い= 新規作成				String s[] = {						"usePacket=true", "debugMessage=false"				};				Modchu_Config.writerConfig(mainCfgfile, s);			} else {				// cfgファイルがある				usePacket = Boolean.valueOf((Modchu_Config.loadConfig(mainCfgfile, "usePacket", usePacket)).toString());				//debugMessage = Boolean.valueOf((Modchu_Config.loadConfig(mainCfgfile, "debugMessage", usePacket)).toString());				String k[] = {						"usePacket"						//, "debugMessage"				};				String k1[] = {						""+usePacket						//, ""+debugMessage				};				Modchu_Config.writerSupplementConfig(mainCfgfile, k, k1);			}		}	}	public static boolean integerCheck(String s) {		try {			Integer.valueOf(s);			return true;		} catch (Exception e) {			return false;		}	}	public static boolean isLocalPlay() {		return isClient && FMLClientHandler.instance().getClient().isIntegratedServerRunning();	}	@Override	public void onPacketData(INetworkManager manager,			Packet250CustomPayload packet, Player player) {		Modchu_Debug.Debug("PFLMF 受信 onPacketData");		if (isClient) PFLMF_Client.clientCustomPayload(manager, packet, player);		else PFLMF_Server.serverCustomPayload(manager, packet, player);	}	@Override	public void playerLoggedIn(Player player, NetHandler netHandler,			INetworkManager manager) {	}	@Override	public String connectionReceived(NetLoginHandler netHandler,			INetworkManager manager) {		return null;	}	@Override	public void connectionOpened(NetHandler netClientHandler, String server,			int port, INetworkManager manager) {	}	@Override	public void connectionOpened(NetHandler netClientHandler,			MinecraftServer server, INetworkManager manager) {	}	@Override	public void connectionClosed(INetworkManager manager) {	}	@Override	public void clientLoggedIn(NetHandler clientHandler,			INetworkManager manager, Packet1Login login) {		if ((Boolean) Modchu_Reflect.getFieldObject("modchu.pflm.PFLM_Main", "entityReplaceFlag")) {			Modchu_Reflect.invokeMethod("modchu.pflm.PFLM_Main", "clientConnect", new Class[]{ NetClientHandler.class }, new Object[]{ clientHandler });		}	}	@Override	public EnumSet ticks() {		return EnumSet.of(TickType.PLAYER, TickType.CLIENT);	}	@Override	public String getLabel() {		return null;	}}